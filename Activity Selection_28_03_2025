Activity Selection
You are given a set of activities, each with a start time and a finish time, represented by the arrays start[] and finish[], respectively. A single person can perform only one activity at a time, meaning no two activities can overlap. Your task is to determine the maximum number of activities that a person can complete in a day.
Examples:

Input: start[] = [1, 3, 0, 5, 8, 5], finish[] = [2, 4, 6, 7, 9, 9]
Output: 4
Explanation: A person can perform at most four activities. The maximum set of activities that can be executed is {0, 1, 3, 4}

Input: start[] = [10, 12, 20], finish[] = [20, 25, 30]
Output: 1
Explanation: A person can perform at most one activity.

Input: start[] = [1, 3, 2, 5], finish[] = [2, 4, 3, 6]
Output: 3
Explanation: A person can perform activities 0, 1 and 3.

Constraints:
1 ≤ start.size() = finish.size() ≤ 2*10^5
1 ≤ start[i] ≤ finish[i] ≤ 109


Expected Complexities
Time Complexity: O(n log n)Auxiliary Space: O(n)


Solution 1: Using a Custom Class (Activity)
Time Complexity:
Sorting activities by finish time: O(nlogn)
Iterating through activities: O(n)
Overall Complexity: O(nlogn)

Space Complexity:
List to store Activity objects: O(n)
Sorting takes extra space (depending on sorting algorithm, typically O(n) for merge sort)
Overall Space Complexity: O(n)

Steps:
Create a class Activity with start and finish attributes.
Store all activities in a List<Activity>.
Sort the activities based on their finish time.
Initialize count = 1 (first activity is always selected).
Iterate through the sorted activities:
If the start time of the current activity is greater than the finish time of the last selected activity, select it.
Update lastfinishtime.
Return count.

class Solution {
    static class Activity{
        int start;
        int finish;
        Activity(int start,int finish){
            this.start=start;
            this.finish=finish;
        }
    }
    public int activitySelection(int[] start, int[] finish) {
        // code here.
        List<Activity> activities=new ArrayList<>();
        for(int i=0;i<start.length;i++){
            activities.add(new Activity(start[i],finish[i]));
        }
        
        // Sort activities by finish time
        activities.sort(Comparator.comparingInt(a->a.finish));
        
        int count=1;
        int lastfinishtime=activities.get(0).finish;
        
        for(int i=1;i<activities.size();i++){
            if(activities.get(i).start>lastfinishtime){
                count++;
                lastfinishtime=activities.get(i).finish;
            }
        }
        
        return count;
        
        
    }
}




Solution 2: Sorting Using Indices
Time Complexity:
Sorting indices by finish time: O(nlogn)
Iterating through activities: O(n)
Overall Complexity: O(nlogn)

Space Complexity:
Array indices[] of size n: O(n)
Sorting uses additional space (depends on sorting algorithm, typically O(n))
Overall Space Complexity: O(n)


Steps:
Create an array indices[] to store indices from 0 to n-1.
Sort indices[] based on finish time.
Initialize count = 1 (first activity is always selected).
Iterate through the sorted indices:
If start[indices[i]] > lastfinishtime, select it.
Update lastfinishtime.
Return count.

class Solution {
    public int activitySelection(int[] start, int[] finish) {
        // code here.
        int n=start.length;
        Integer[] indices=new Integer[n];
        
          // Store indices from 0 to n-1
        for(int i=0;i<n;i++){
            indices[i]=i;
        }
        
        // Sort indices based on finish times
        Arrays.sort(indices,Comparator.comparingInt(i->finish[i]));
        
        int count=1; // First activity is always selected
        int lastfinishtime=finish[indices[0]];
        
        for(int i=1;i<n;i++){
            if(start[indices[i]]>lastfinishtime){
                count++;
                lastfinishtime=finish[indices[i]];
            }
        }
        
        return count;
        
        
    }
}
