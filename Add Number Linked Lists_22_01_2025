Add Number Linked Lists
Given the head of two singly linked lists num1 and num2 representing two non-negative integers. The task is to return the head of the linked list representing the sum of these two numbers.
For example, num1 represented by the linked list : 1 -> 9 -> 0, similarly num2 represented by the linked list: 2 -> 5. Sum of these two numbers is represented by 2 -> 1 -> 5.
Note: There can be leading zeros in the input lists, but there should not be any leading zeros in the output list.
Examples:
Input: num1 = 4 - > 5, num2 = 3 -> 4 -> 5
Output:  3 -> 9 -> 0
 
Explanation: Given numbers are 45 and 345. There sum is 390.
Input: num1 = 0 -> 0 -> 6 -> 3, num2 = 0 -> 7 
Output: 7 -> 0 
 
Explanation: Given numbers are 63 and 7. There sum is 70.
Constraints:
1 <= size of both linked lists <= 106
0 <= elements of both linked lists <= 9
Time Complexity: O(n + m)Auxiliary Space: O(max(n, m))

class Solution {
    public static Node remove_leading_zeros(Node head){
        while(head.data==0){
            head=head.next;
        }
        return head;
    }
    public static Node reverseLL(Node head){
        Node prev=null;
        Node current=head;
        while(current!=null){
            Node next=current.next;
            current.next=prev;
            prev=current;
            current=next;
        }
        
        return prev;
    }
    static Node addTwoLists(Node num1, Node num2) {
        // code here
        Node n1=remove_leading_zeros(num1);
        Node n2=remove_leading_zeros(num2);
        
        Node n1_rev=reverseLL(n1);
        Node n2_rev=reverseLL(n2);
        Node ans=new Node(-1);
        Node last=ans;
        
        Node temp1=n1_rev;
        Node temp2=n2_rev;
        int sum=0;
        while(temp1!=null && temp2!=null){
            sum+=temp1.data+temp2.data;
            last.next=new Node(sum%10);
            last=last.next;
            sum=sum/10;
            temp1=temp1.next;
            temp2=temp2.next;
        }
        while(temp1!=null){
            sum+=temp1.data;
            last.next=new Node(sum%10);
            last=last.next;
            sum/=10;
            temp1=temp1.next;
        }
        while(temp2!=null){
            sum+=temp2.data;
            last.next=new Node(sum%10);
            last=last.next;
            sum/=10;
            temp2=temp2.next;
        }
        if(sum>0){
            last.next=new Node(sum);
            last=last.next;
        }
        return reverseLL(ans.next);
    }
}
