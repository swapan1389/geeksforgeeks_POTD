Coin Change (Count Ways)
Given an integer array coins[ ] representing different denominations of currency and an integer sum, find the number of ways you can make sum by using different combinations from coins[ ]. 
Note: Assume that you have an infinite supply of each type of coin. Therefore, you can use any coin as many times as you want.
Answers are guaranteed to fit into a 32-bit integer. 

Examples:

Input: coins[] = [1, 2, 3], sum = 4
Output: 4
Explanation: Four Possible ways are: [1, 1, 1, 1], [1, 1, 2], [2, 2], [1, 3].
Input: coins[] = [2, 5, 3, 6], sum = 10
Output: 5
Explanation: Five Possible ways are: [2, 2, 2, 2, 2], [2, 2, 3, 3], [2, 2, 6], [2, 3, 5] and [5, 5].
Input: coins[] = [5, 10], sum = 3
Output: 0
Explanation: Since all coin denominations are greater than sum, no combination can make the target sum.
Constraints:
1 <= sum <= 10^3
1 <= coins[i] <= 10^4
1 <= coins.size() <= 10^3

Expected Complexities
Time Complexity: O(n * sum)Auxiliary Space: O(sum)

1. Brute Force Approach (Recursive Solution)
Time Complexity:
O(2^n) in the worst case, since each function call branches into two possibilities (taking or not taking a coin).
Space Complexity:
O(sum) (recursive stack space).
Steps:
Define a recursive function helper(coins, ind, sum).
Base case: If ind == 0, return 1 if sum is divisible by coins[0], else return 0.
Recursive calls:
notTake: Do not take the current coin and call helper(coins, ind - 1, sum).
take: If coins[ind] <= sum, take the coin and call helper(coins, ind, sum - coins[ind]).
Return notTake + take.

public int count(int coins[], int sum) {
        // code here.
        // Brute Force Approach
        return helper(coins,coins.length-1,sum);
    }
    
    public int helper(int [] coins,int ind,int sum){
        // Base Case
        
        if(ind==0){
            if(sum%coins[0]==0){
                return 1;
            }
            else{
                return 0;
            }
        }
        
        int notTake=helper(coins,ind-1,sum);
        int take=0;
        if(coins[ind]<=sum){
            take=helper(coins,ind,sum-coins[ind]);
        }
        
        return notTake+take;
        
    }


2. Memoization (Top-Down DP)
Time Complexity:
O(n * sum), since there are n * sum unique states, each computed once.
Space Complexity:
O(n * sum) for the dp array.
O(sum) for recursion stack (in worst case).

Steps:
Define a 2D dp array of size [n][sum+1], initialized to -1.
Implement the recursive helper function with memoization.
Base case: If ind == 0, return 1 if sum is divisible by coins[0], else return 0.
Before making recursive calls, check if dp[ind][sum] is already computed.
Compute notTake and take values as in the brute-force approach.
Store the result in dp[ind][sum] and return it.

 public int count(int coins[], int sum) {
        // code here.
        // Memoization
        int [][] dp=new int [coins.length][sum+1];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        return helper(coins,coins.length-1,sum,dp);
    }
    
    public int helper(int [] coins,int ind,int sum,int [][] dp){
        // Base Case
        
        if(ind==0){
            if(sum%coins[0]==0){
                return 1;
            }
            else{
                return 0;
            }
        }
        
        if(dp[ind][sum]!=-1) return dp[ind][sum];
        
        int notTake=helper(coins,ind-1,sum,dp);
        int take=0;
        if(coins[ind]<=sum){
            take=helper(coins,ind,sum-coins[ind],dp);
        }
        
        dp[ind][sum]=notTake+take;
        
        return dp[ind][sum];
        
    }

3. Tabulation (Bottom-Up DP)
Time Complexity:
O(n * sum), since we iterate over all n * sum states.
Space Complexity:
O(n * sum) for the dp table.

Steps:
Create a 2D dp array of size [n][sum+1].
Base case: If there is only one type of coin, fill the first row (dp[0][s]).
Iterate over i from 1 to n-1 (each coin type).
Iterate over s from 0 to sum:
Compute notTake = dp[i-1][s].
Compute take = dp[i][s - coins[i]] if coins[i] <= s.
Store dp[i][s] = notTake + take.
Return dp[n-1][sum].

public int count(int coins[], int sum) {
        // code here.
        // Tabulation
        int n=coins.length;
        int [][] dp=new int [n][sum+1];
        
        // Base Case 
        // // Fill the first row (Only one type of coin available)
        
        for(int s=0;s<=sum;s++){
            if(s%coins[0]==0){
                dp[0][s]=1;
            }
            else{
                dp[0][s]=0;
            }
        }
        
        // Fill the dp Table
        for(int i=1;i<n;i++){
            for(int s=0;s<=sum;s++){
                int notTake=dp[i-1][s];
                int take=0;
                if(coins[i]<=s){
                    take=dp[i][s-coins[i]];
                }
                
                dp[i][s]=notTake+take;
            }
        }
        
        return dp[n-1][sum];
    }


4. Space-Optimized Tabulation
Time Complexity:
O(n * sum), as we process all states.
Space Complexity:
O(sum), since we use only two 1D arrays of size sum+1.

Steps:
Use two 1D arrays prev and curr of size sum+1.
Initialize prev array using the base case condition.
Iterate over i from 1 to n-1:
Iterate over s from 0 to sum:
Compute notTake = prev[s].
Compute take = curr[s - coins[i]] if coins[i] <= s.
Store curr[s] = notTake + take.
Update prev = curr.clone().
Return prev[sum].

public int count(int coins[], int sum) {
        // code here.
        // Tabulation
        int n=coins.length;
        int []prev=new int [sum+1];
        int [] curr=new int [sum+1];
        
        // Base Case 
        // // Fill the first row (Only one type of coin available)
        
        for(int s=0;s<=sum;s++){
            if(s%coins[0]==0){
                prev[s]=1;
            }
            else{
                prev[s]=0;
            }
        }
        
        // Fill the dp Table
        for(int i=1;i<n;i++){
            for(int s=0;s<=sum;s++){
                int notTake=prev[s];
                int take=0;
                if(coins[i]<=s){
                    take=curr[s-coins[i]];
                }
                
                curr[s]=notTake+take;
            }
            
            prev=curr.clone();
        }
        
        return prev[sum];
    }
