Construct Tree from Inorder & Preorder
Given two arrays representing the inorder and preorder traversals of a binary tree, construct the tree and return the root node of the constructed tree.
Note: The output is written in postorder traversal.
Examples:
Input: inorder[] = [1, 6, 8, 7], preorder[] = [1, 6, 7, 8]
Output: [8, 7, 6, 1]
Explanation: The tree will look like

Input: inorder[] = [3, 1, 4, 0, 2, 5], preorder[] = [0, 1, 3, 4, 2, 5]
Output: [3, 4, 1, 5, 2, 0]
Explanation: The tree will look like

Input: inorder[] = [2, 5, 4, 1, 3], preorder[] = [1, 4, 5, 2, 3]
Output: [2, 5, 4, 3, 1]
Explanation: The tree will look like

Constraints:
1 ≤ number of nodes ≤ 10^3
0 ≤ nodes -> data ≤ 10^3
Both the inorder and preorder arrays contain unique values.
Expected Complexities
Time Complexity: O(n)Auxiliary Space: O(n)

Approach 1:

 public static Node buildTree(int inorder[], int preorder[]) {
        // code here
        if (preorder.length == 0) return null;

        int rootVal = preorder[0];
        Node root = new Node(rootVal);

        int rootIndex = findIndex(inorder, rootVal);

        int[] leftInorder = sliceArray(inorder, 0, rootIndex - 1);
        int[] leftPreorder = sliceArray(preorder, 1, rootIndex);

        int[] rightInorder = sliceArray(inorder, rootIndex + 1, inorder.length - 1);
        int[] rightPreorder = sliceArray(preorder, rootIndex + 1, preorder.length - 1);

        root.left = buildTree(leftInorder, leftPreorder);
        root.right = buildTree(rightInorder, rightPreorder);

        return root;
    }

    private static int findIndex(int[] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) return i;
        }
        return -1; // Should never happen for valid input
    }

    private static int[] sliceArray(int[] arr, int start, int end) {
        if (start > end) return new int[0];
        int[] slice = new int[end - start + 1];
        System.arraycopy(arr, start, slice, 0, slice.length);
        return slice;
    }


Approach 2:
public static Node buildTree(int inorder[], int preorder[]) {
        // code here
        HashMap<Integer,Integer> map=new HashMap<>();
        
        for(int i=0;i<inorder.length;i++){
            map.put(inorder[i],i);
        }
        return buildTree(inorder,0,inorder.length-1,preorder,0,preorder.length-1,map);
    }
    
    public static Node buildTree(int [] inorder,int inStart,int inEnd,int[] preorder,int preStart,int preEnd,HashMap<Integer,Integer> map){
        if(inStart>inEnd || preStart>preEnd) return null;
        
        Node root=new Node(preorder[preStart]);
        
        int inroot=map.get(root.data);
        
        int itemsBefore_root=inroot-inStart;
        root.left=buildTree(inorder,inStart,inroot-1,preorder,preStart+1,preStart+itemsBefore_root,map);
        root.right=buildTree(inorder,inroot+1,inEnd,preorder,preStart+itemsBefore_root+1,preEnd,map);
        return root;    
    }
