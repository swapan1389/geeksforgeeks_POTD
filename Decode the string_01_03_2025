Decode the string
Given an encoded string s, the task is to decode it. The encoding rule is :

k[encodedString], where the encodedString inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.
Note: The test cases are generated so that the length of the output string will never exceed 105 .

Examples:

Input: s = "1[b]"
Output: "b"
Explanation: "b" is present only one time.

Input: s = "3[b2[ca]]"
Output: "bcacabcacabcaca"
Explanation:
1. Inner substring “2[ca]” breakdown into “caca”.
2. Now, new string becomes “3[bcaca]”
3. Similarly “3[bcaca]” becomes “bcacabcacabcaca ” which is final result.

Constraints:
1 ≤ |s| ≤ 10^5 

Expected Complexities
Time Complexity: O(n)Auxiliary Space: O(n

Approach:  Time Complexity: O(N×M) (worst case).Worst case: if every character is inside a bracket and repeated multiple times → O(N×M), where M is the maximum repeat factor.
Space Complexity: O(N)
Initialize a Stack: Use a stack to store characters as we traverse the input string.
Traverse the String: If the character is ']', it means we have reached the end of a bracketed sequence.
Otherwise, push characters onto the stack.
Extract Encoded Substring: Pop characters from the stack until we find '[', forming the substring inside brackets.
Extract the Repetition Number:
Continue popping from the stack until a non-digit character is found.
Convert the collected digits into an integer (handles multi-digit numbers).
Expand the Substring:Use the extracted number to repeat the substring efficiently using StringBuilder.
Push the Expanded String Back onto the Stack:Push each character of the expanded string back onto the stack.
Build the Final Decoded String:After processing the entire input, pop characters from the stack and construct the final decoded string in the correct order.


static String decodeString(String s) {
        Stack<Character> st = new Stack<>();
        
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == ']') {
                StringBuilder temp = new StringBuilder();
                
                // Extract the substring inside the brackets
                while (!st.isEmpty() && st.peek() != '[') {
                    temp.insert(0, st.pop());  // Insert at the beginning
                }
                
                st.pop(); // Remove '['
                
                // Extract the number before '['
                StringBuilder numStr = new StringBuilder();
                while (!st.isEmpty() && Character.isDigit(st.peek())) {
                    numStr.insert(0, st.pop());  // Insert at the beginning
                }
                
                int num = Integer.parseInt(numStr.toString());  // Convert to integer
                
                // Use StringBuilder and repeat() to avoid inefficient concatenation
                String repeatedStr = temp.toString().repeat(num);
                
                // Push the expanded string back onto the stack
                for (char ch : repeatedStr.toCharArray()) {
                    st.push(ch);
                }
            } else {
                st.push(s.charAt(i));
            }
        }
        
        // Construct the final decoded string
        StringBuilder ans = new StringBuilder();
        while (!st.isEmpty()) {
            ans.insert(0, st.pop());
        }
        
        return ans.toString();
    }
