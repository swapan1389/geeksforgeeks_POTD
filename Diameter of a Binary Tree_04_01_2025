Diameter of a Binary Tree
Given a binary tree, the diameter (also known as the width) is defined as the number of edges on the longest path between two leaf nodes in the tree. This path may or may not pass through the root. Your task is to find the diameter of the tree.
Examples:
Input: root[] = [1, 2, 3]
Output: 2
Explanation: The longest path has 2 edges (node 2 -> node 1 -> node 3).
Input: root[] = [5, 8, 6, 3, 7, 9]
Output: 4
Explanation: The longest path has 4 edges (node 3 -> node 8 -> node 5 -> node 6 -> node 9).
Constraints:
1 ≤ number of nodes ≤ 10^5
0 ≤ node->data ≤ 10^5
Expected Complexities
Time Complexity: O(n)Auxiliary Space: O(h)

class Solution {
    public static class TreeInfo{
        int diameter;
        int height;
        TreeInfo(int diameter,int height){
            this.diameter=diameter;
            this.height=height;
        }
    }
    int diameter(Node root) {
        // Your code here
         return (diameterHelper(root).diameter) -1;
    }
    
    public TreeInfo diameterHelper(Node root){
        if(root==null) return new TreeInfo(0,0);
        
        TreeInfo left=diameterHelper(root.left);
        TreeInfo right=diameterHelper(root.right);
        
        int dia1=left.diameter;
        int dia2=right.diameter;
        int dia3=1+left.height+right.height;
        
        int currentdia=Math.max(Math.max(dia1,dia2),dia3);
        int currentheight=1+Math.max(left.height,right.height);
        return new TreeInfo(currentdia,currentheight);
    }
}
