Histogram Max Rectangular Area
You are given a histogram represented by an array arr, where each element of the array denotes the height of the bars in the histogram. All bars have the same width of 1 unit.

Your task is to find the largest rectangular area possible in the given histogram, where the rectangle can be formed using a number of contiguous bars.

Examples:

Input: arr[] = [60, 20, 50, 40, 10, 50, 60]
 Largest-Rectangular-Area-in-a-Histogram
Output: 100
Explanation: We get the maximum by picking bars highlighted above in green (50, and 60). The area is computed (smallest height) * (no. of the picked bars) = 50 * 2 = 100.
Input: arr[] = [3, 5, 1, 7, 5, 9]
Output: 15
Explanation:  We get the maximum by picking bars 7, 5 and 9. The area is computed (smallest height) * (no. of the picked bars) = 5 * 3 = 15.
Input: arr[] = [3]
Output: 3
Explanation: In this example the largest area would be 3 of height 3 and width 1.
Constraints:
1 ≤ arr.size() ≤ 105
0 ≤ arr[i] ≤ 104

Expected Complexities
Time Complexity: O(n)Auxiliary Space: O(n)


Naive Approach:
Naive Approach (Using Previous and Next Smaller Elements)
Steps:
Find Previous Smaller Element (PSE):

Use a stack to store indices of elements in increasing order.
For each element, find the closest smaller element on the left.
Find Next Smaller Element (NSE):

Use a stack to store indices of elements in increasing order.
For each element, find the closest smaller element on the right.
Calculate Maximum Area:

Iterate through the histogram.
Compute the width of the rectangle using the indices of the next and previous smaller elements.
Calculate the area and update the maximum area.
Time Complexity:
Finding PSE: O(n)
Finding NSE: O(n)
Calculating area: O(n)
Overall: O(n) + O(n) + O(n) = O(n)
Space Complexity:
Extra space for stacks and arrays: O(n)

class Solution {
    public static int getMaxArea(int arr[]) {
        // your code here
        int [] pse=findpse(arr);
        int [] nse=findnse(arr);
        
        int max=0;
        for(int i=0;i<arr.length;i++){
            
            int width=nse[i]-pse[i]-1;
            
            int area=width*arr[i];
            max=Math.max(max,area);
            
        }
        
        return max;
    }
    
    public static int [] findpse(int [] arr){
        int [] pse=new int [arr.length];
        Stack<Integer> st=new Stack<>();
        
        for(int i=0;i<arr.length;i++){
            while(!st.isEmpty() && arr[st.peek()]>=arr[i]){
                st.pop();
            }
            
            int ans=st.isEmpty()?-1:st.peek();
            
            pse[i]=ans;
            
            st.push(i);
        }
        return pse;
    }
    
    public static int [] findnse(int [] arr){
        int [] nse=new int [arr.length];
        Stack<Integer> st=new Stack<>();
        
        for(int i=arr.length-1;i>=0;i--){
            while(!st.isEmpty() && arr[st.peek()]>=arr[i]){
                st.pop();
            }
            
            int ans=st.isEmpty()?arr.length:st.peek();
            nse[i]=ans;
            st.push(i);
        }
        return nse;
    }
    
    
    
}

Optimized Approach (Using a Single Stack)
Steps:
Iterate Through the Histogram:

Use a stack to keep track of indices of elements in increasing order.
If the current element is smaller than the element at the stack's top, process the previous bars.
Process Elements in Stack:

For each element popped, calculate width using the current index and the previous element in the stack.
Compute the area and update the maximum area.
Process Remaining Stack Elements:

After iteration, process all remaining elements in the stack using the histogram's length as the right boundary.
Time Complexity:
Each element is pushed and popped once: O(n)
Space Complexity:
Stack usage: O(n)

class Solution {
    public static int getMaxArea(int arr[]) {
        // Stack to store indices of histogram bars
        Stack<Integer> st = new Stack<>();
        int max_area = 0;
        
        // Traverse each bar in the histogram
        for (int i = 0; i < arr.length; i++) {
            // Maintain a decreasing stack
            while (!st.isEmpty() && arr[st.peek()] >= arr[i]) {
                int el_index = st.peek(); // Store the top index
                st.pop(); // Pop the top element
                
                int nse = i; // Next Smaller Element index
                int pse = st.isEmpty() ? -1 : st.peek(); // Previous Smaller Element index
                
                int height = arr[el_index]; // Height of the rectangle
                int width = (nse - pse - 1); // Width calculated using indices
                
                // Update max_area if we find a larger area
                max_area = Math.max(max_area, height * width);
            }
            
            // Push the current index onto the stack
            st.push(i);
        }
        
        // Process the remaining elements in the stack
        while (!st.isEmpty()) {
            int el_index = st.peek(); // Store the top index
            st.pop(); // Pop the top element
            
            int nse = arr.length; // No next smaller element
            int pse = st.isEmpty() ? -1 : st.peek(); // Previous Smaller Element index
            
            int height = arr[el_index]; // Height of the rectangle
            int width = (nse - pse - 1); // Width calculated using indices
            
            // Update max_area if we find a larger area
            max_area = Math.max(max_area, height * width);
        }
        
        return max_area;
    }
}

