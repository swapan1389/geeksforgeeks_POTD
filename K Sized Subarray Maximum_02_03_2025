K Sized Subarray Maximum
Given an array arr[] of integers and an integer k, your task is to find the maximum value for each contiguous subarray of size k. The output should be an array of maximum values corresponding to each contiguous subarray.

Examples:
Input: arr[] = [1, 2, 3, 1, 4, 5, 2, 3, 6], k = 3
Output: [3, 3, 4, 5, 5, 5, 6] 
Explanation: 
1st contiguous subarray = [1 2 3] max = 3
2nd contiguous subarray = [2 3 1] max = 3
3rd contiguous subarray = [3 1 4] max = 4
4th contiguous subarray = [1 4 5] max = 5
5th contiguous subarray = [4 5 2] max = 5
6th contiguous subarray = [5 2 3] max = 5
7th contiguous subarray = [2 3 6] max = 6

Input: arr[] = [8, 5, 10, 7, 9, 4, 15, 12, 90, 13], k = 4
Output: [10, 10, 10, 15, 15, 90, 90]
Explanation: 
1st contiguous subarray = [8 5 10 7], max = 10
2nd contiguous subarray = [5 10 7 9], max = 10
3rd contiguous subarray = [10 7 9 4], max = 10
4th contiguous subarray = [7 9 4 15], max = 15
5th contiguous subarray = [9 4 15 12], max = 15
6th contiguous subarray = [4 15 12 90], max = 90
7th contiguous subarray = [15 12 90 13], max = 90

Input: arr[] = [5, 1, 3, 4, 2, 6], k = 1
Output: [5, 1, 3, 4, 2, 6]
Explanation: 
When k = 1, each element in the array is its own subarray, so the output is simply the same array
Constraints:
1 ≤ arr.size() ≤ 10^6
1 ≤ k ≤ arr.size()
0 ≤ arr[i] ≤ 10^9

Expected Complexities
Time Complexity: O(n)Auxiliary Space: O(k)

Approach:Time Complexity O(N-K) * O(K).Space Compexity O(K) for storage.
Initialize a list to store results.
Iterate through the entire sequence, considering only valid starting points for subarrays.
For each starting point, initialize a variable to track the maximum value.
Iterate over the next window_size elements and update the maximum value.
Store the maximum value in the result list.
Return the final list after processing all possible subarrays.
public ArrayList<Integer> maxOfSubarrays(int arr[], int k) {
        // code here
        
        // Brute Force Approach
        
        int n=arr.length;
        ArrayList<Integer> ans=new ArrayList<>();
        
        for(int i=0;i<=n-k;i++){
            int max=Integer.MIN_VALUE;
            for(int j=i;j<=i+k-1;j++){
                max=Math.max(max,arr[j]);
            }
            ans.add(max);
        }
        
        return ans;
        
    }

Approach:Time Complexity: O(N) . Space Complexity: O(K)
Initialize a list to store results.
Use a data structure that allows efficient removal from both ends to keep track of indices.
Iterate through the sequence:
Remove outdated elements that are no longer within the window.
Remove elements from the back that are smaller than the current element to maintain order.
Add the current index to the structure.
Once the first full window is reached, record the maximum value (front element of the structure) in the result list.
Return the final list after processing all elements.

public ArrayList<Integer> maxOfSubarrays(int arr[], int k) {
        // code here
        // Optimized Approach
        ArrayList<Integer> ans=new ArrayList<>();
        Deque<Integer> dq=new LinkedList<>();
        
        for(int i=0;i<arr.length;i++){
            // Check any element is present out of the window then pop them
            if(!dq.isEmpty() && dq.peekFirst()<=i-k){
                dq.pollFirst();
            }
            
            // remove the elements from back which are less than current element to
            // maintain decreasing order
            while(!dq.isEmpty() && arr[dq.peekLast()]<=arr[i]){
                dq.pollLast();
            }
            
            // Push The current element index
            dq.offerLast(i);
            
            // Now add the maximum element from the queuefront to result list
            // starting from i-k means if i=2 then it is the first window
            // further every element add the result
            if(i>=k-1){
                ans.add(arr[dq.peekFirst()]);
            }
        }
        
        return ans;
    }
