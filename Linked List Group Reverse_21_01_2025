Linked List Group Reverse
Given the head a linked list, the task is to reverse every k node in the linked list. If the number of nodes is not a multiple of k then the left-out nodes in the end, should be considered as a group and must be reversed.
Examples:
Input: head = 1 -> 2 -> 2 -> 4 -> 5 -> 6 -> 7 -> 8, k = 4
Output: 4 -> 2 -> 2 -> 1 -> 8 -> 7 -> 6 -> 5
Explanation: The first 4 elements 1, 2, 2, 4 are reversed first and then the next 4 elements 5, 6, 7, 8. Hence, the resultant linked list is 4 -> 2 -> 2 -> 1 -> 8 -> 7 -> 6 -> 5.

Input: head = 1 -> 2 -> 3 -> 4 -> 5, k = 3
Output: 3 -> 2 -> 1 -> 5 -> 4
Explanation: The first 3 elements 1, 2, 3 are reversed first and then left out elements 4, 5 are reversed. Hence, the resultant linked list is 3 -> 2 -> 1 -> 5 -> 4.

Constraints:
1 <= size of linked list <= 10^5
1 <= data of nodes <= 10^6
1 <= k <= size of linked list 

Expected Complexities
Time Complexity: O(n)Auxiliary Space: O(1)


public static Node reverseLL(Node head){
        if(head==null||head.next==null){
            return head;
        }
        
        Node prev=null;
        Node current=head;
        while(current!=null){
            Node next=current.next;
            current.next=prev;
            prev=current;
            current=next;
        }
        
        return prev;
    }
    public static Node reverseKGroup(Node head, int k) {
        // code here
        
        // Base cases
        if(head==null || head.next==null||k==0||k==1){
            return head;
        }
        Node dummy=new Node(-1);
        Node ans=dummy;
        Node current=head;
        while(current!=null){
            Node nhead=current;
            int n=k;
            while(current.next!=null && n>1){
                current=current.next;
                n--;
            }
            Node neighbour=current.next;
            current.next=null;
            dummy.next=reverseLL(nhead);
            dummy=nhead;
            current=neighbour;
        }
        return ans.next;
    }
