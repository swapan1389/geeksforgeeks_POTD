Longest Palindrome in a String
Given a string s, your task is to find the longest palindromic substring within s.
A substring is a contiguous sequence of characters within a string, defined as s[i...j] where 0 ≤ i ≤ j < len(s).
A palindrome is a string that reads the same forward and backward. More formally, s is a palindrome if reverse(s) == s.
Note: If there are multiple palindromic substrings with the same length, return the first occurrence of the longest palindromic substring from left to right.

Examples :

Input: s = “forgeeksskeegfor” 
Output: “geeksskeeg”
Explanation: There are several possible palindromic substrings like “kssk”, “ss”, “eeksskee” etc. But the substring “geeksskeeg” is the longest among all.

Input: s = “Geeks” 
Output: “ee”
Explanation: "ee" is the longest palindromic substring of "Geeks". 

Input: s = “abc” 
Output: “a”
Explanation: "a", "b" and "c" are longest palindromic substrings of same length. So, the first occurrence is returned.

Constraints:
1 ≤ s.size() ≤ 10^3
s consist of only lowercase English letters.
Expected Complexities
Time Complexity: O(n^2)Auxiliary Space: O(1)

Approach 1: Brute Force :Time Complexity: O(n³) .Space Complexity: O(1)
Steps:

Generate all possible substrings.
Check if each substring is a palindrome.
Track and return the longest palindromic substring.

static String longestPalindrome(String s) {
        // code here
        // Brute force Approach
        int n=s.length();
        String longest="";
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                String sub=s.substring(i,j+1);
                
                if(isPalindrome(sub) && sub.length()>longest.length()){
                    longest=sub;
                }
            }
        }
        
        return longest;
        
    }
    public static boolean isPalindrome(String  str){
        int left=0;
        int right=str.length()-1;
        while(left<right){
            if(str.charAt(left)!=str.charAt(right)){
                return false;
            }
            left++;
            right--;
        }
        
        return true;
    }

Approach 2: Expand Around Center  : Time Complexity: O(n²) . Space Complexity: O(1)
Steps:

Iterate through each character as a center.
Expand outwards for odd and even-length palindromes.
Update the longest palindrome found.
static String longestPalindrome(String s) {
        // code here
        if(s==null || s.length()==0) return "";
        String  longest="";
        
        for(int i=0;i<s.length();i++){
             // Expand for odd-length palindromes (single character center)
             String odd=expandFromCenter(s,i,i);
             // Expand for even-length palindromes (two character center)
             String   even=expandFromCenter(s,i,i+1);
             // Update longest palindrome found
             if(odd.length()>longest.length()) longest=odd; 
             if(even.length()>longest.length()) longest=even;    
        }
        
        return longest;
    }
    public static String expandFromCenter(String str,int left,int right){
        
        while(left>=0 && right<str.length() && str.charAt(left)==str.charAt(right)){
            left--;   // Move left pointer outward
            right++;   // Move right pointer outward
        }
        
        return str.substring(left+1,right);
    }
