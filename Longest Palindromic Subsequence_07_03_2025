Longest Palindromic Subsequence
Given a string s, return the length of the longest palindromic subsequence.
A subsequence is a sequence that can be derived from the given sequence by deleting some or no elements without changing the order of the remaining elements.

A palindromic sequence is a sequence that reads the same forward and backward.
Examples:

Input: s = "bbabcbcab"
Output: 7
Explanation: Subsequence "babcbab" is the longest subsequence which is also a palindrome.

Input: s = "abcd"
Output: 1
Explanation: "a", "b", "c" and "d" are palindromic and all have a length 1.

Input: s = "agbdba"
Output: 5
Explanation: The longest palindromic subsequence is "abdba", which has a length of 5. The characters in this subsequence are taken from the original string "agbdba", and they maintain the order of the string while forming a palindrome.
Constraints:
1 ≤ s.size() ≤ 1000
The string contains only lowercase letters.

Expected Complexities
Time Complexity: O(n^2)Auxiliary Space: O(n^2)

1st Approach: Brute Force (Generating All Subsequences):Time Complexity O(n * 2^n)	. Space Complexity O(2^n)
Steps:
Generate all possible subsequences of the given string.
Check which subsequences are palindromes.
Track the length of the longest palindromic subsequence.

public int longestPalinSubseq(String s) {
        // code here
        // Brute Force Approach
        ArrayList<String> list=new ArrayList<>();
        generateSequences(s,0,"",list);
        
        int maxlength=0;
        for(String subseq:list){
            maxlength=Math.max(maxlength,subseq.length());
        }
        
        return maxlength;
    }
    
    public void generateSequences(String s,int index,String current,ArrayList<String> list){
        // Base Case 
        if(index==s.length()){
            if(!current.isEmpty() && isPalindrome(current)){
                list.add(current);
            }
            
            return;
        }
        
        // Include the character
        
        generateSequences(s,index+1,current+s.charAt(index),list);
        
        // Exclude the character
        
        generateSequences(s,index+1,current,list);
    }
    
    
    public boolean isPalindrome(String s){
        int left=0;
        int right=s.length()-1;
        while(left<right){
            if(s.charAt(left)!=s.charAt(right)){
                return false;
            }
            
            left++;
            right--;
        }
        
        return true;
    }

2nd Approach: Recursion with Reverse String (LCS Approach) : Time Complexity O(2^n). Space Complexity O(n).
Steps:
Reverse the original string.
Find the Longest Common Subsequence (LCS) between the original string and the reversed string.
Use recursion to compute LCS.

public int longestPalinSubseq(String s) {
        // code here
        
        String rev=new StringBuilder(s).reverse().toString();
        int n=s.length();
        return helper(s,rev,n-1,n-1);
    }
    
    public int helper(String s1,String s2,int i,int j){
        //  // Base Case: If either string is empty
         if (i < 0 || j < 0) {
            return 0;
        }
        
        
        // If chracter move then check for previous substring
        if(s1.charAt(i)==s2.charAt(j)){
            return 1+helper(s1,s2,i-1,j-1);
        }
        
        // If not match then either ignore first string char or second string char
        
        return 0+Math.max(helper(s1,s2,i-1,j),helper(s1,s2,i,j-1));
    }

3rd Approach: Memoization (Top-Down DP): Time Complexity:O(n²) (Each state is computed once).Space Complexity:O(n²) (Dominated by DP table)
Steps:
Reverse the original string.
Use a 2D DP array (dp[i][j]) to store results of subproblems.
If characters match, add 1 to dp[i-1][j-1].
If they don’t match, take the max of dp[i-1][j] and dp[i][j-1].
public int longestPalinSubseq(String s) {
        // code here
        
        String rev=new StringBuilder(s).reverse().toString();
        int n=s.length();
        int dp[][]=new int [n][n];
        for(int [] row:dp){
            Arrays.fill(row,-1);
        }
        return helper(s,rev,n-1,n-1,dp);
    }
    
    public int helper(String s1,String s2,int i,int j,int dp[][]){
        //  // Base Case: If either string is empty
         if (i < 0 || j < 0) {
            return 0;
        }
        
        // If result already computed
        if(dp[i][j]!=-1) return dp[i][j];
        
        // If chracter move then check for previous substring
        if(s1.charAt(i)==s2.charAt(j)){
            dp[i][j]= 1+helper(s1,s2,i-1,j-1,dp);
        }
        
        // If not match then either ignore first string char or second string char
        else{
            dp[i][j]=0+Math.max(helper(s1,s2,i-1,j,dp),helper(s1,s2,i,j-1,dp));
        }
        
        return dp[i][j];
        
    }

4th Approach: Bottom-Up DP:Time Complexity:O(n²) (Iterating over DP table).Space Complexity:O(n²) (for the DP table)

Steps:
Reverse the string.
Initialize a 2D DP table dp[n+1][n+1] where dp[i][j] represents the LCS length of the first i characters of s and first j characters of rev.
If s[i-1] == rev[j-1], update dp[i][j] = 1 + dp[i-1][j-1].
Else, take max(dp[i-1][j], dp[i][j-1]).
Return dp[n][n].

public int longestPalinSubseq(String s) {
        // code here
        
        String rev=new StringBuilder(s).reverse().toString();
        int n=s.length();
        int dp[][]=new int [n+1][n+1];
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=n;j++){
                //When s1[i-1] == s2[j-1], this character is part of the LPS.
                //The LPS up to this point can be extended by adding 1 to the
                // LPS of the previous subproblem (dp[i-1][j-1]).
                if(s.charAt(i-1)==rev.charAt(j-1)){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                //Instead, we take the maximum LCS length found so far by either:
                //Ignoring s1[i-1] → Take LPS from dp[i-1][j]
                //Ignoring s2[j-1] → Take LPS from dp[i][j-1]
                else{
                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        
        return dp[n][n];
    }

5th Approach: Space-Optimized DP : Time Complexity:O(n²) (Iterating over DP table).Space Complexity:O(n) (using two 1D arrays instead of O(n²) DP table)
Steps:
Reverse the string.
Instead of using a 2D DP table, maintain only two 1D arrays (prev and curr).
Update values in curr based on prev to avoid using extra space.
Return prev[n], which holds the result.
public int longestPalinSubseq(String s) {
        // code here
        
        String rev=new StringBuilder(s).reverse().toString();
        int n=s.length();
        int [] prev=new int[n+1];
        int [] curr=new int[n+1];
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=n;j++){
                //When s1[i-1] == s2[j-1], this character is part of the LPS.
                //The LPS up to this point can be extended by adding 1 to the
                // LPS of the previous subproblem (dp[i-1][j-1]).
                if(s.charAt(i-1)==rev.charAt(j-1)){
                    curr[j]=1+prev[j-1];
                }
                //Instead, we take the maximum LCS length found so far by either:
                //Ignoring s1[i-1] → Take LPS from dp[i-1][j]
                //Ignoring s2[j-1] → Take LPS from dp[i][j-1]
                else{
                    curr[j]=Math.max(prev[j],curr[j-1]);
                }
            }
            
            prev=curr.clone();
        }
        
        return prev[n];
    }
