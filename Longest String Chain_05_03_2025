Longest String Chain
You are given an array of words where each word consists of lowercase English letters.
wordA is a predecessor of wordB if and only if we can insert exactly one letter anywhere in wordA without changing the order of the other characters to make it equal to wordB. For example, "abc" is a predecessor of "abac", while "cba" is not a predecessor of "bcad".

A word chain is a sequence of words [word1, word2, ..., wordk] with k >= 1, where word1 is a predecessor of word2, word2 is a predecessor of word3, and so on. A single word is trivially a word chain with k = 1.

Return the length of the longest possible word chain with words chosen from the given list of words in any order.

Examples:

Input: words[] = ["ba", "b", "a", "bca", "bda", "bdca"]
Output: 4
Explanation: One of the longest word chains is ["a", "ba", "bda", "bdca"].

Input: words[] = ["abc", "a", "ab"]
Output: 3
Explanation: The longest chain is {"a", "ab" "abc"}

Input: words[] = ["abcd", "dbqca"]
Output: 1
Explanation: The trivial word chain ["abcd"] is one of the longest word chains.

Constraint:
1 <= words.length <= 10^
1 <= words[i].length <= 10
 words[i] only consists of lowercase English letters.

Expected Complexities
Time Complexity: O(nlogn + n*m²)Auxiliary Space: O(n * m)

Approach 1:
Steps:
Sort Words by Length → O(N log N)
This ensures that shorter words are processed before longer words.

Use a DP Array (dp[]) → O(N)
Each word is initially assigned a chain length of 1.

Nested Loop to Check Predecessors → O(N² * M)
For every word words[i], check all previous words words[j] (where j < i).
Call isPredecessor(words[j], words[i]) to check if words[j] can be extended to words[i].

Check Predecessor (isPredecessor) → O(M)
Compare two words character by character.
Time Complexity:
Sorting Words → O(N log N)
Nested Loop (Checking Each Word Pair) → O(N² * M)
N² for the two nested loops.
M for the isPredecessor function.
Total Complexity → O(N² * M)
Space Complexity:
O(N) for dp[] array.
public int longestStringChain(String words[]) {
        // code here
        Arrays.sort(words,Comparator.comparingInt(String::length));// Sort words by length
        int n=words.length;
        int[] dp=new int[n];
        Arrays.fill(dp,1);// Each word alone is a chain of length 1
        int maxlength=1;
        
        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                if(isPredecessor(words[j],words[i])){
                    dp[i]=Math.max(dp[i],dp[j]+1);
                }
            }
            
            maxlength=Math.max(maxlength,dp[i]);
        }
        
        return maxlength;
    }
    
    public boolean isPredecessor(String s1,String s2){
        
        if (s1.length() + 1 != s2.length()) return false;

    int first = 0, second = 0;
    boolean inserted = false;

    while (first < s1.length() && second < s2.length()) {
        if (s1.charAt(first) == s2.charAt(second)) {
            first++; // Move both pointers when characters match
        } else if (inserted) { 
            return false; // More than one insertion is not allowed
        } else {
            inserted = true; // Allow inserting one extra character in s2
        }
        second++; // Always move the pointer for s2
    }
    
    return true;
    }

Approach 2:
Steps:
Sort Words by Length → O(N log N)
Ensures smaller words are processed first.

Use a HashMap (dp) for Memoization → O(N)
dp[word] stores the longest chain ending at word.

Process Each Word & Check Possible Predecessors → O(NM)
For each word, generate M possible predecessors (removing one letter at a time).
Lookup predecessors in dp in O(1)` instead of iterating through all previous words.
Time Complexity:
Sorting Words → O(N log N)
Processing Each Word → O(NM)
M predecessors per word.
O(1) HashMap lookup.
Total Complexity → O(N log N) + O(NM) ≈ O(N log N)
Space Complexity:
O(N) for the HashMap dp.

public int longestStringChain(String words[]) {
        // code here
        // Sort words by length
        Arrays.sort(words, Comparator.comparingInt(String::length));
        
        Map<String, Integer> dp = new HashMap<>();
        int maxlength = 1;

        for (String word : words) {
            dp.put(word, 1); // Each word alone is a chain of length 1
            
            for (int i = 0; i < word.length(); i++) {
                // Generate predecessor by removing one character
                String predecessor = word.substring(0, i) + word.substring(i + 1);
                
                if (dp.containsKey(predecessor)) {
                    dp.put(word, Math.max(dp.get(word), dp.get(predecessor) + 1));
                }
            }

            maxlength = Math.max(maxlength, dp.get(word));
        }

        return maxlength;
    }
