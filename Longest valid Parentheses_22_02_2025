Longest valid Parentheses
Given a string s consisting of opening and closing parenthesis '(' and ')'. Find the length of the longest valid parenthesis substring.

A parenthesis string is valid if:

For every opening parenthesis, there is a closing parenthesis.
The closing parenthesis must be after its opening parenthesis.
Examples :
Input: s = "((()"
Output: 2
Explanation: The longest valid parenthesis substring is "()".

Input: s = ")()())"
Output: 4
Explanation: The longest valid parenthesis substring is "()()".

Input: s = "())()"
Output: 2
Explanation: The longest valid parenthesis substring is "()".

Constraints:
1 ≤ s.size() ≤ 10^6  
s consists of '(' and ')' only

Expected Complexities
Time Complexity: O(n)Auxiliary Space: O(n)

Approach:

Initialize a stack and set index = -1.
Iterate through the string:
Push index if (.
If ), pop stack if not empty; else update index = i.
Update ans using i - index if stack is empty, else i - stack.peek().
Return ans.


static int maxLength(String s) {
        // code here
        
        Stack<Integer> st=new Stack<>();
        int ans=0;
        int index=-1;
        
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='('){
                st.push(i);
            }
            else{
                
                if(st.isEmpty()){
                    index=i;
                }
                
                else{
                    st.pop();
                    if(st.isEmpty()){
                        ans=Math.max(ans,i-index);
                    }
                    else{
                        ans=Math.max(ans,i-st.peek());
                    }
                }
            }
        }
        return ans;
