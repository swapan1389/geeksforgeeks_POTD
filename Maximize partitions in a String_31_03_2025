Maximize partitions in a String
Given a string s of lowercase English alphabets, your task is to return the maximum number of substrings formed, after possible partitions (probably zero) of s such that no two substrings have a common character.
Examples:

Input: s = "acbbcc"
Output: 2
Explanation: "a" and "cbbcc" are two substrings that do not share any characters between them.
Input: s = "ababcbacadefegdehijhklij"
Output: 3
Explanation: Partitioning at the index 8 and at 15 produces three substrings: “ababcbaca”, “defegde”, and “hijhklij” such that none of them have a common character. So, the maximum number of substrings formed is 3.
Input: s = "aaa"
Output: 1
Explanation: Since the string consists of same characters, no further partition can be performed. Hence, the number of substring (here the whole string is considered as the substring) is 1.
Constraints:
1 ≤ s.size() ≤ 10^5
'a' ≤ s[i] ≤ 'z' 


Expected Complexities
Time Complexity: O(n)Auxiliary Space: O(n)



Algorithmic Steps to Solve the Problem
Time and Space Complexity Analysis
Time Complexity:
The algorithm consists of two main passes through the string:
First Pass: Compute the last index of each character → O(N)
Second Pass: Iterate through the string and determine partitions → O(N)
Thus, the overall time complexity is:O(N)+O(N)=O(N)
where N is the length of the string.

Space Complexity:
We use an integer array lastIndex[26] to store the last occurrence of each character. Since this array has a fixed size (26 letters in the English alphabet), it takes O(1) space.
We use a few integer variables (partitions, end), which take O(1) space.
Thus, the space complexity is:O(1)
(since we are not using extra space that depends on the input size).



Step 1: Store Last Occurrences of Characters
Create an array lastIndex[26] to store the last occurrence of each character in the given string s.
Iterate through the string from index 0 to s.length() - 1 and update lastIndex[s.charAt(i) - 'a'] = i.

Step 2: Iterate and Partition the String
Initialize two variables:
end = 0 → Tracks the farthest last occurrence encountered so far.
partitions = 0 → Counts the number of valid partitions.

Iterate through the string from index 0 to s.length() - 1:
Update end = max(end, lastIndex[s.charAt(i) - 'a']) to extend the current partition if needed.
If i == end, a partition is completed:
Increment partitions++ since we have found a valid substring.
Do not reset end since it will be updated dynamically in the next iterations.
Step 3: Return the Number of Partitions
Return partitions as the maximum number of substrings that can be formed.




class Solution {
    public int maxPartitions(String s) {
        // code here
        int[] lastIndex = new int[26];
        for (int i = 0; i < s.length(); i++) {
            lastIndex[s.charAt(i) - 'a'] = i;
        }
        
        int partitions = 0, end = 0;
        
        for (int i = 0; i < s.length(); i++) {
            end = Math.max(end, lastIndex[s.charAt(i) - 'a']);
            if (i == end) {
                partitions++;
            }
        }
        
        return partitions;
    }
}
