Maximum of minimum for every window size
Given an array of integers arr[], the task is to find the maximum of the minimum values for every possible window size in the array, where the window size ranges from 1 to arr.size().

More formally, for each window size k, determine the smallest element in all windows of size k, and then find the largest value among these minimums where 1<=k<=arr.size().

Examples :

Input: arr[] = [10, 20, 30, 50, 10, 70, 30]
Output: [70, 30, 20, 10, 10, 10, 10] 
Explanation: 
1. First element in output indicates maximum of minimums of all windows of size 1. Minimums of windows of size 1 are [10], [20], [30], [50], [10], [70] and [30]. Maximum of these minimums is 70. 
2. Second element in output indicates maximum of minimums of all windows of size 2. Minimums of windows of size 2 are [10], [20], [30], [10], [10], and [30]. Maximum of these minimums is 30. 
3. Third element in output indicates maximum of minimums of all windows of size 3. Minimums of windows of size 3 are [10], [20], [10], [10] and [10]. Maximum of these minimums is 20. 
Similarly other elements of output are computed.

Input: arr[] = [10, 20, 30]
Output: [30, 20, 10]
Explanation: First element in output indicates maximum of minimums of all windows of size 1. Minimums of windows of size 1 are [10] , [20] , [30]. Maximum of these minimums are 30 and similarly other outputs can be computed
Constraints:
1 <= arr.size() <= 10^5
1 <= arr[i] <= 10^6

Expected Complexities
Time Complexity: O(n)Auxiliary Space: O(n)

Approach: Time Complexity: O(n) (Each element is processed a constant number of times using stacks and arrays).Space Complexity: O(n) (For auxiliary arrays and stack).
Initialize Data Structures:

Create an array to store results for each window size.
Prepare two auxiliary arrays to track the previous and next smaller elements.
Use a stack to facilitate efficient calculations.
Compute Previous Smaller Elements:

Iterate through the array while maintaining a stack.
For each element, find the index of the closest smaller element on the left.
If no smaller element exists, store -1.
Compute Next Smaller Elements:

Iterate from right to left while maintaining a stack.
For each element, find the index of the closest smaller element on the right.
If no smaller element exists, store n.
Compute Maximum of Minimums for Each Window Size:

Determine the window size for each element using its previous and next smaller indices.
Update the result array with the maximum of the minimum values.
Fill Remaining Entries to Ensure Non-Increasing Order:

Traverse the result array from right to left.
Ensure that each entry is at least as large as the next one to maintain correctness.

public ArrayList<Integer> maxOfMins(int[] arr) {
        // Your code here
        
        int n=arr.length;
        ArrayList<Integer> ans=new ArrayList<>();
        for(int i=0;i<n;i++){
            ans.add(0);
        }
        int [] prevsmaller=new int [n];
        int [] nextsmaller=new int [n];
        
        Stack<Integer> st=new Stack<>();
        // Step 1: Compute Previous Smaller Elements
        
        for(int i=0;i<n;i++){
            
            while(!st.isEmpty() && arr[st.peek()]>=arr[i]){
                st.pop();
            }
            
            prevsmaller[i]=st.isEmpty()?-1:st.peek();
            
            st.push(i);
        }
        
        st.clear();
        
         // Step 2: Compute Next Smaller Elements
         for(int i=n-1;i>=0;i--){
             while(!st.isEmpty() && arr[st.peek()]>=arr[i]){
                 st.pop();
             }
             
             nextsmaller[i]=st.isEmpty()?n:st.peek();
             st.push(i);
         }
         
         
           // Step 3: Compute Maximum of Minimums for Each Window Size
           
           for(int i=0;i<n;i++){
               int len=nextsmaller[i]-prevsmaller[i]-1; // Window size
               ans.set(len-1,Math.max(ans.get(len-1),arr[i])); // Adjusted for 0-based index
               
           }
           
            // Step 4: Fill Remaining Entries to Maintain Non-Increasing Order
            for(int i=n-2;i>=0;i--){
                ans.set(i,Math.max(ans.get(i),ans.get(i+1)));
            }
            
            return ans;
         
         
    }
