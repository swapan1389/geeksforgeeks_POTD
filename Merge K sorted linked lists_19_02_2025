Merge K sorted linked lists
Given an array arr[] of n sorted linked lists of different sizes. The task is to merge them in such a way that after merging they will be a single sorted linked list, then return the head of the merged linked list.
Examples:

Input: arr[] = [1 -> 2 -> 3, 4 -> 5, 5 -> 6, 7 -> 8]
Output: 1 -> 2 -> 3 -> 4 -> 5 -> 5 -> 6 -> 7 -> 8
Explanation:
The arr[] has 4 sorted linked list of size 3, 2, 2, 2.
1st list: 1 -> 2-> 3
2nd list: 4 -> 5
3rd list: 5 -> 6
4th list: 7 -> 8


Input: arr[] = [1 -> 3, 8, 4 -> 5 -> 6]
Output: 1 -> 3 -> 4 -> 5 -> 6 -> 8
Explanation:
The arr[] has 3 sorted linked list of size 2, 3, 1.
1st list: 1 -> 3
2nd list: 8
3rd list: 4 -> 5 -> 6


Constraints
1 <= total no. of nodes <= 10^5
1 <= node->data <= 10^3

Expected Complexities
Time Complexity: O(n log n)Auxiliary Space: O(n)

Approach 1:
Initialize temp as the first linked list.
Iterate through the array, merging each list with temp using Merger2LL().
In Merger2LL(), use a dummy node to merge two sorted linked lists.
Compare nodes from both lists and attach the smaller node to the result list.
Attach any remaining nodes after one list is exhausted.
Return the merged list.
Time Complexity: O(kN)
Space Complexity: O(1)

 Node mergeKLists(List<Node> arr) {
        // Add your code here.
        
        Node temp=arr.get(0);
        
        for(int i=1;i<arr.size();i++){
            temp=Merger2LL(temp,arr.get(i));
        }
        
        return temp;
    }
    
    Node Merger2LL(Node head1,Node head2){
        Node dummy=new Node(-1);
        Node last=dummy;
        
        while(head1!=null && head2!=null){
            if(head1.data<head2.data){
                last.next=head1;
                head1=head1.next;
                last=last.next;
            }
            
            else{
                last.next=head2;
                head2=head2.next;
                last=last.next;
                
            }
        }
        
        if(head1!=null){
            last.next=head1;
        }
        
        if(head2!=null){
            last.next=head2;
        }
        
        return dummy.next;
        
    }
    

Approach 2: Min Heap (Priority Queue)
Create a Min Heap (PriorityQueue) to store the head of each list.
Insert all non-null linked list heads into the heap.
Extract the smallest node from the heap and append it to the result list.
If the extracted node has a next, insert it into the heap.
Repeat until the heap is empty.
Return the merged linked list.
Time Complexity: O(Nlogk)
Space Complexity: O(k)

Node mergeKLists(List<Node> arr) {
        // Add your code here.
        
        PriorityQueue<Node> pq=new PriorityQueue<>((a,b)->Integer.compare(a.data,b.data));
        
        Node dummy=new Node(-1);
        Node last=dummy;
        
        for(int i=0;i<arr.size();i++){
            Node temp=arr.get(i);
            pq.add(temp);
        }
        
        while(!pq.isEmpty()){
            Node minnode=pq.poll();
            last.next=minnode;
            last=last.next;
            if(minnode.next!=null) pq.add(minnode.next);
        }
        
        return dummy.next;
        
        
    }







