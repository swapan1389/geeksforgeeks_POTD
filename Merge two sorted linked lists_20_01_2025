Merge two sorted linked lists
Given the head of two sorted linked lists consisting of nodes respectively. The task is to merge both lists and return the head of the sorted merged list.

Examples:
Input: head1 = 5 -> 10 -> 15 -> 40, head2 = 2 -> 3 -> 20
Output: 2 -> 3 -> 5 -> 10 -> 15 -> 20 -> 40
Explanation:

Input: head1 = 1 -> 1, head2 = 2 -> 4
Output: 1 -> 1 -> 2 -> 4
Explanation:

Constraints:
1 <= no. of nodes<= 10^3
0 <= node->data <= 10^5

Time Complexity: O(n + m)Auxiliary Space: O(1)


Node sortedMerge(Node head1, Node head2) {
        // code here
        if(head1==null) return head2;
        if(head2==null) return head1;
        
        Node dummy=new Node(-1);
        Node last=dummy;
        Node temp1=head1;
        Node temp2=head2;
        
        while(temp1!=null && temp2!=null){
            if(temp1.data<temp2.data){
                last.next=temp1;
                last=last.next;
                temp1=temp1.next;
            }
            
            else{
                last.next=temp2;
                last=last.next;
                temp2=temp2.next;
            }
        }
        
        if(temp1!=null){
            last.next=temp1;
        }
        
        if(temp2!=null){
            last.next=temp2;
        }
        
        
        return dummy.next;
    }
