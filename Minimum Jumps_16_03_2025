Minimum Jumps
You are given an array arr[] of non-negative numbers. Each number tells you the maximum number of steps you can jump forward from that position.
For example:
If arr[i] = 3, you can jump to index i + 1, i + 2, or i + 3 from position i.
If arr[i] = 0, you cannot jump forward from that position.
Your task is to find the minimum number of jumps needed to move from the first position in the array to the last position.

Note:  Return -1 if you can't reach the end of the array.

Examples : 
Input: arr[] = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9]
Output: 3 
Explanation: First jump from 1st element to 2nd element with value 3. From here we jump to 5th element with value 9, and from here we will jump to the last. 

Input: arr = [1, 4, 3, 2, 6, 7]
Output: 2 
Explanation: First we jump from the 1st to 2nd element and then jump to the last element.

Input: arr = [0, 10, 20]
Output: -1
Explanation: We cannot go anywhere from the 1st element.

Constraints:
2 ≤ arr.size() ≤ 10^4
0 ≤ arr[i] ≤ 10^4


Expected Complexities
Time Complexity: O(n)Auxiliary Space: O(1)

Algorithm (Two-Pointer Approach)

Time Complexity Analysis
We iterate through the array once → O(n)
Each element is processed only once, updating farthest, right, and jumps.
No nested loops → Optimal linear time complexity.
Final Time Complexity: O(n)

Space Complexity Analysis
We use only a few extra variables (left, right, farthest, jumps) → O(1) space.
No additional arrays or data structures.
Final Space Complexity: O(1)


Initialize variables:
left = 0 → Start of the current jump range.
right = 0 → End of the current jump range.
farthest = 0 → The farthest index we can reach.
jumps = 0 → The number of jumps taken.
Iterate through the array (except the last element since reaching n-1 is enough):

Update farthest = max(farthest, i + arr[i]) to track the maximum index reachable.
If i == right (end of the current range is reached):
Increment jumps since we now need another jump.
Update left = right + 1 and right = farthest to move to the next jump range.
If farthest <= right, return -1 (stuck, can't move further).
Return jumps when we reach or exceed n-1.

static int minJumps(int[] arr) {
        // code here
        
        int n=arr.length;
        if(n<=1) return 0; // Already at the last index
        
        if(arr[0]==0) return -1; // Can't move anywhere
        
        int jumps=0;
        int left=0;
        int right=0;
        
        while(right<n-1){  // While we haven't reached the last index
        
            
            int farthest=0;
            for(int i=left;i<=right;i++){
                farthest=Math.max(farthest,i+arr[i]);  // Find the farthest point
            }
            
            if(farthest<=right) return -1;  // If we can't move forward, return -1
            
            left = right + 1;  // Move the left pointer
            right = farthest;  // Update right pointer to new max reach
            jumps++;  // Increment jump count
        }
        
        return jumps;
    }


