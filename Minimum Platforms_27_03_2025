Minimum Platforms
You are given the arrival times arr[] and departure times dep[] of all trains that arrive at a railway station on the same day. Your task is to determine the minimum number of platforms required at the station to ensure that no train is kept waiting.
At any given time, the same platform cannot be used for both the arrival of one train and the departure of another. Therefore, when two trains arrive at the same time, or when one arrives before another departs, additional platforms are required to accommodate both trains.
Examples:
Input: arr[] = [900, 940, 950, 1100, 1500, 1800], dep[] = [910, 1200, 1120, 1130, 1900, 2000]
Output: 3
Explanation: There are three trains during the time 9:40 to 12:00. So we need a minimum of 3 platforms.

Input: arr[] = [900, 1235, 1100], dep[] = [1000, 1240, 1200]
Output: 1
Explanation: All train times are mutually exclusive. So we need only one platform

Input: arr[] = [1000, 935, 1100], dep[] = [1200, 1240, 1130]
Output: 3
Explanation: All 3 trains have to be there from 11:00 to 11:30

Constraints:
1≤ number of trains ≤ 50000
0000 ≤ arr[i] ≤ dep[i] ≤ 2359
Note: Time intervals are in the 24-hour format(HHMM) , where the first two characters represent hour (between 00 to 23 ) and the last two characters represent minutes (this will be <= 59 and >= 0).

Expected Complexities
Time Complexity: O(n log n)Auxiliary Space: O(n)


Steps:
Time Complexity:
Sorting: O(n log n)
Traversal: O(n)
Total Complexity: O(n log n)

Space Complexity:
O(1) (Only a few integer variables are used)


Sorting:
We first sort both arrival (arr[]) and departure (dep[]) arrays.
Sorting ensures we process train events in chronological order.
Two-Pointer Traversal:
i tracks the arrival of trains.
j tracks the departure of trains.
If an arrival occurs before (or at the same time as) a departure, a new platform is needed.
If a train departs before the next train arrives, a platform is freed.
Tracking Maximum Platforms:
We keep track of the peak number of platforms required (maxCount).


static int findPlatform(int arr[], int dep[]) {
        // add your code here
        int n=arr.length;
        // Step 1: Sort the arrival and departure times
        Arrays.sort(arr);
        Arrays.sort(dep);
        
        // Pointers for arrival and departure arrays
        int i=0; 
        int j=0; 
        // 'count' keeps track of the number of platforms needed at any time
        // 'maxCount' stores the maximum number of platforms needed at peak time
         int count = 0, maxCount = 0;
          // Step 2: Traverse both sorted arrays to determine platform requirement
        while (i < n && j < n) {
            if (arr[i] <= dep[j]) {
                count++;
                i++;      
            } 
            else {
                count--;
                j++;     
            }

            // Update the maximum platform count required at any time
            maxCount = Math.max(maxCount, count);
        }
        
        // Step 3: Return the maximum number of platforms needed at peak time
        return maxCount;
    }
