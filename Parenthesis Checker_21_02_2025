Parenthesis Checker
Given a string s, composed of different combinations of '(' , ')', '{', '}', '[', ']', verify the validity of the arrangement.
An input string is valid if:

         1. Open brackets must be closed by the same type of brackets.
         2. Open brackets must be closed in the correct order.

Examples :

Input: s = "[{()}]"
Output: true
Explanation: All the brackets are well-formed.

Input: s = "[()()]{}"
Output: true
Explanation: All the brackets are well-formed.

Input: s = "([]"
Output: False
Explanation: The expression is not balanced as there is a missing ')' at the end.

Input: s = "([{]})"
Output: False
Explanation: The expression is not balanced as there is a closing ']' before the closing '}'.

Constraints:
1 ≤ s.size() ≤ 10^6
s[i] ∈ {'{', '}', '(', ')', '[', ']'}


Expected Complexities
Time Complexity: O(n)Auxiliary Space: O(n)

Approach :Time Complexity: O(n) (each character is processed once)
Space Complexity: O(n) (in the worst case, all characters are opening brackets)

Create a stack to store opening brackets.
Iterate through the string: push opening brackets, check and pop matching closing brackets, return false if mismatched.
Return true if the stack is empty after traversal; otherwise, return false.

class Solution {
    static boolean isBalanced(String s) {
        // code here
        Stack<Character> st=new Stack<>();
        for(int i=0;i<s.length();i++){
            char ch=s.charAt(i);
            if("({[".indexOf(ch)!=-1){
                st.push(ch);
            }
            else{
                if(st.isEmpty()) return false;
                char top=st.peek();
                if(ch==')' && top=='(' || ch=='}' && top=='{' || ch==']' && top=='[' ){
                    st.pop(); 
                }
                else{
                    return false;
                }
            }
        }
        if(st.isEmpty()){
            return true;
        }
        else{
            return false;
        }
    }
}
