Rotate a Linked List
Given the head of a singly linked list, your task is to left rotate the linked list k times.
Examples:
Input: head = 10 -> 20 -> 30 -> 40 -> 50, k = 4
Output: 50 -> 10 -> 20 -> 30 -> 40
Explanation:
Rotate 1: 20 -> 30 -> 40 -> 50 -> 10
Rotate 2: 30 -> 40 -> 50 -> 10 -> 20
Rotate 3: 40 -> 50 -> 10 -> 20 -> 30
Rotate 4: 50 -> 10 -> 20 -> 30 -> 40

Input: head = 10 -> 20 -> 30 -> 40 , k = 6
Output: 30 -> 40 -> 10 -> 20 
 
Constraints:

1 <= number of nodes <= 105
0 <= k <= 109
0 <= data of node <= 109
Expected Complexities
Time Complexity: O(n)Auxiliary Space: O(1)

public Node rotate(Node head, int k) {
        // add code here
        
         // Handle edge cases
        if (head == null || head.next == null || k == 0) {
            return head;
        }

        Node tail=head;
        int length=1;
        while(tail.next!=null){
            tail=tail.next;
            length++;
        }
        
        if(k%length==0) return head;
        k=k%length;
        tail.next=head;
        Node temp=head;
        int i=1;
        while(i<k){
            temp=temp.next;
            i++;
        }
        
        head=temp.next;
        temp.next=null;
        
        return head;
    }
