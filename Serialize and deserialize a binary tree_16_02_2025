Serialize and deserialize a binary tree
Serialization is to store a tree in an array so that it can be later restored and deserialization is reading tree back from the array. Complete the functions
serialize() : stores the tree into an array a and returns the array.
deSerialize() : deserializes the array to the tree and returns the root of the tree.
Note: Multiple nodes can have the same data and the node values are always positive integers. Your code will be correct if the tree returned by deSerialize(serialize(input_tree)) is same as the input tree. Driver code will print the in-order traversal of the tree returned by deSerialize(serialize(input_tree)).

Examples :
Input: root = [1, 2, 3]  
Output: [2, 1, 3]

Input: root = [10, 20, 30, 40, 60, N, N]   
Output: [40, 20, 60, 10, 30]
Constraints:
1 <= Number of nodes <= 10^4
1 <= Data of a node <= 10^9

Expected Complexities
Time Complexity: O(n)Auxiliary Space: O(n)

Apprach :
Serialization (serialize):
Uses preorder traversal (root → left → right).
Stores -1 for null nodes.
Deserialization (deSerialize):
Uses a static index (idx) to track position in the list.
Rebuilds the tree in the same preorder manner.
Time & Space Complexity:
Time Complexity: O(n)
Space Complexity: O(n) (due to recursion stack and list storage)


class Tree {
    // Function to serialize a tree and return a list containing nodes of tree.
    public ArrayList<Integer> serialize(Node root) {
        // code here
        ArrayList<Integer> list=new ArrayList<>();
        helper(root,list);
        return list;
    }
    
    
    public void helper(Node root,ArrayList<Integer> list){
        if(root==null){
            list.add(-1);
            return;
        }
        
        list.add(root.data);
        helper(root.left,list);
        helper(root.right,list);
    }
    
    static int idx;

    // Function to deserialize a list and construct the tree.
    public Node deSerialize(ArrayList<Integer> arr) {
        // code here
        idx=-1;
        return deserializehelper(arr);
    }
    
    public Node deserializehelper(ArrayList<Integer> arr){
        idx++;
        if(arr.get(idx)==-1){
            return null;
            
        }
        Node root=new Node(arr.get(idx));
        root.left=deserializehelper(arr);
        root.right=deserializehelper(arr);
        return root;
    }
};
