Stock Buy and Sell – Max K Transactions Allowed
In the stock market, a person buys a stock and sells it on some future date. You are given an array prices[] representing stock prices on different days and a positive integer k, find out the maximum profit a person can make in at-most k transactions.

A transaction consists of buying and subsequently selling a stock and new transaction can start only when the previous transaction has been completed.

Examples :
Input: prices[] = [10, 22, 5, 80], k = 2
Output: 87
Explaination:
1st transaction: Buy at 10 and sell at 22. 
2nd transaction : Buy at 5 and sell at 80.
Total Profit will be 12 + 75 = 87.

Input: prices[] = [20, 580, 420, 900], k = 3
Output: 1040
Explaination: 
1st transaction: Buy at 20 and sell at 580. 
2nd transaction : Buy at 420 and sell at 900.
Total Profit will be 560 + 480 = 1040.

Input: prices[] = [100, 90, 80, 50, 25],  k = 1
Output: 0
Explaination: Selling price is decreasing continuously
leading to loss. So seller cannot have any profit.

Constraints:
1 ≤ prices.size() ≤ 10^3
1 ≤ k ≤ 200
1 ≤ prices[i] ≤ 10^3

Expected Complexities
Time Complexity: O(n * k)Auxiliary Space: O(k)


1st Solution: Brute Force Recursion (Exponential)
Time Complexity: O(2^N) (Exponential) Since at every index, we have two choices (buy/sell or not), the worst case results in 2^N calls.
Space Complexity: O(N) (Recursive Stack) Depth of the recursion tree is at most N.

Steps:
Use recursion to explore all possibilities of buying and selling.
At each step:
Choose to buy a stock (if allowed).
Choose to sell a stock (if already bought).
Skip to the next index without any action.
Base case: Stop recursion when the index reaches the end of the array or transactions are exhausted.
static int maxProfit(int prices[], int k) {
        // code here
        // Brute Force Approach
        
        return helper(0,1,k,prices);
        
    }
    
    static int helper(int ind, int buy, int Tcount, int[] prices) {
        
        // Base Cases
        if(ind==prices.length || Tcount==0) return 0;
        
        int profit=0;
        if(buy==1){
            int Buy=-prices[ind]+helper(ind+1,0,Tcount,prices);
            int notBuy=0+helper(ind+1,1,Tcount,prices);
            profit=Math.max(Buy,notBuy);
        }
        
        else{ // To sell
        
        int sell=prices[ind]+helper(ind+1,1,Tcount-1,prices);
        int notsell=helper(ind+1,0,Tcount,prices);
        
        profit=Math.max(sell,notsell);
        }
        
        return profit;
    }




2nd Solution: Recursion + Memoization (Top-Down DP)
O(N * K * 2) ≈ O(N * K) At most N * K * 2 unique states are computed and stored.
Space Complexity: O(N * K) (Memoization Table) +O(N) (Recursive Stack)

Steps:
Use a 3D DP table dp[ind][buy][Tcount] to store results for (index, buy/sell, transactions left).
Use recursion similar to the brute force approach but check dp before computing a result.
Store computed results in dp to avoid redundant calculations.

static int maxProfit(int prices[], int k) {
        // code here
        // Brute Force Approach
        
        int n=prices.length;
        int [][][] dp=new int [n][2][k+1];
        // Initialize dp with -1
        for (int[][] row : dp)
            for (int[] col : row)
                Arrays.fill(col, -1);

        return helper(0, 1, k, prices, dp);
        
    }
    static int helper(int ind, int buy, int Tcount, int[] prices, int[][][] dp) {
        if (ind == prices.length || Tcount == 0) return 0;

        if (dp[ind][buy][Tcount] != -1) return dp[ind][buy][Tcount];

        int profit = 0;
        if (buy == 1) {
            int Buy = -prices[ind] + helper(ind + 1, 0, Tcount, prices, dp);
            int notBuy = helper(ind + 1, 1, Tcount, prices, dp);
            profit = Math.max(Buy, notBuy);
        } else { // To sell
            int sell = prices[ind] + helper(ind + 1, 1, Tcount - 1, prices, dp);
            int notSell = helper(ind + 1, 0, Tcount, prices, dp);
            profit = Math.max(sell, notSell);
        }

        return dp[ind][buy][Tcount] = profit;
    }


3rd Solution: Tabulation (Bottom-Up DP)
Time Complexity: O(N * K * 2) ≈ O(N * K) Each cell in the DP table is computed once.
Space Complexity: O(N * K) (DP table)

Steps:
Use a 3D DP table dp[ind][buy][Tcount].
Iterate from the last day to the first.
Iterate over buy = 0/1 and Tcount = 1 to K.
Fill dp[ind][buy][Tcount] based on previous values.

 static int maxProfit(int prices[], int k) {
        // code here
        // Tabulation
        
        int n=prices.length;
        int [][][] dp=new int [n+1][2][k+1];
        
        
        int profit = 0;
        
        for(int ind=n-1;ind>=0;ind--){
            for(int buy=0;buy<=1;buy++){
                for(int Tcount=1;Tcount<=k;Tcount++){  // as for Transaction 0 stored value is 
                    if (buy == 1) {
                        int Buy = -prices[ind] + dp[ind + 1] [0][Tcount];
                        int notBuy = dp[ind + 1] [1] [Tcount];
                        profit = Math.max(Buy, notBuy);
                        
                    } 
                    else { // To sell
                    int sell = prices[ind] + dp[ind + 1] [1][Tcount - 1];
                    int notSell = dp[ind + 1] [0] [Tcount];
                    profit = Math.max(sell, notSell);
                        
                    }
                    
                    dp[ind][buy][Tcount]=profit;
                    
                }
            }
        }
        return dp[0][1][k];
        
        
    }



4th Solution: Space Optimized DP

Time Complexity: O(N * K) Same as the tabulation approach.
Space Complexity: O(K) Only two 2D arrays (curr and after) of size 2 * K.

Steps:
Instead of using a 3D DP table, use two 2D arrays (curr and after).
Compute values iteratively from the last day.
Store only the last computed row, reducing space usage.


static int maxProfit(int prices[], int k) {
        // code here
        // Space optimized
        
        int n=prices.length;
        int [][] after=new int [2][k+1];
        int [][] curr=new int [2][k+1];
        
        
        int profit = 0;
        
        for(int ind=n-1;ind>=0;ind--){
            for(int buy=0;buy<=1;buy++){
                for(int Tcount=1;Tcount<=k;Tcount++){  // as for Transaction 0 stored value is 
                    if (buy == 1) {
                        int Buy = -prices[ind] + after[0][Tcount];
                        int notBuy = after [1] [Tcount];
                        profit = Math.max(Buy, notBuy);
                        
                    } 
                    else { // To sell
                    int sell = prices[ind] + after [1][Tcount - 1];
                    int notSell = after [0] [Tcount];
                    profit = Math.max(sell, notSell);
                        
                    }
                    
                    curr[buy][Tcount]=profit;
                    
                }
            }
            
            after=curr;
        }
        return after [1][k];
        
        
    }



5th Solution: Transaction-Based Recursion
Time Complexity: O(2^N) (Exponential) Each transaction results in two choices at each step.
Space Complexity:O(N) (Recursive Stack)

Steps:
Use transactionNo instead of buy/sell for tracking states.
Even transaction numbers mean buying, odd mean selling.
Explore:
Buying at prices[ind] and moving to the next transaction.
Selling at prices[ind] and moving to the next transaction.
Skipping.

static int maxProfit(int prices[], int k) {
        return helper(0, 0, k, prices);
    }

    static int helper(int ind, int transactionNo, int k, int[] prices) {
        // Base Case: If out of bounds OR all transactions completed
        if (ind == prices.length || transactionNo == 2 * k) return 0;

        int profit = 0;

        if (transactionNo % 2 == 0) { // Buy transaction
            int buy = -prices[ind] + helper(ind + 1, transactionNo + 1, k, prices);
            int skip = helper(ind + 1, transactionNo, k, prices);
            profit = Math.max(buy, skip);
        } else { // Sell transaction
            int sell = prices[ind] + helper(ind + 1, transactionNo + 1, k, prices);
            int skip = helper(ind + 1, transactionNo, k, prices);
            profit = Math.max(sell, skip);
        }

        return profit;
    }



6th Solution: Memoization with Transaction-Based DP
Time Complexity: O(N * K) Each (ind, transactionNo) pair is computed only once.
Space Complexity: O(N * K) (Memoization Table) + O(N) (Recursive Stack)

Steps:
Use a 2D DP table dp[ind][transactionNo] to store results.
Modify the recursive approach to check DP before recomputation.
Store results in dp[ind][transactionNo] for quick retrieval.
 static int maxProfit(int prices[], int k) {
        
        int n=prices.length;
        int Tcount=2*k;
        int[][] dp = new int[n][Tcount]; // Memoization table
        for (int[] row : dp) Arrays.fill(row, -1); // Initialize with -1
        return helper(0, 0, k, prices,dp);
    }

    static int helper(int ind, int transactionNo, int k, int[] prices,int[][] dp) {
        // Base Case: If out of bounds OR all transactions completed
        if (ind == prices.length || transactionNo == 2 * k) return 0;
        
        // Return cached result if already computed
        if(dp[ind][transactionNo]!=-1) return dp[ind][transactionNo];

        int profit = 0;

        if (transactionNo % 2 == 0) { // Buy transaction
            int buy = -prices[ind] + helper(ind + 1, transactionNo + 1, k, prices,dp);
            int skip = helper(ind + 1, transactionNo, k, prices,dp);
            profit = Math.max(buy, skip);
        } else { // Sell transaction
            int sell = prices[ind] + helper(ind + 1, transactionNo + 1, k, prices,dp);
            int skip = helper(ind + 1, transactionNo, k, prices,dp);
            profit = Math.max(sell, skip);
        }

        return dp[ind][transactionNo]=profit;// Store result
    }





7th Solution: Tabulation with Transaction-Based DP
Time Complexity: O(N * K) Each (ind, transactionNo) is computed once.
Space Complexity:O(N * K) (DP Table)


Steps:
Use a 2D DP table dp[ind][transactionNo] where transactionNo = 0 to 2*K.
Fill the table from the last day to the first.
At each step, decide whether to:
Buy or skip if transactionNo is even.
Sell or skip if transactionNo is odd.

static int maxProfit(int prices[], int k) {
        
        int n=prices.length;
        int Tcount=2*k;
        int[][] dp = new int[n+1][Tcount+1];
        // Filling DP table bottom-up
        for (int ind = n - 1; ind >= 0; ind--) {
            for (int transactionNo = 2 * k - 1; transactionNo >= 0; transactionNo--) {
                int profit = 0;

                if (transactionNo % 2 == 0) { // Buy allowed
                    int buy = -prices[ind] + dp[ind + 1][transactionNo + 1]; // Buy
                    int skip = dp[ind + 1][transactionNo]; // Skip
                    profit = Math.max(buy, skip);
                } else { // Sell allowed
                    int sell = prices[ind] + dp[ind + 1][transactionNo + 1]; // Sell
                    int skip = dp[ind + 1][transactionNo]; // Skip
                    profit = Math.max(sell, skip);
                }

                dp[ind][transactionNo] = profit;
            }
        }

        return dp[0][0]; // Max profit starting from day 0 with 0 transactions
    }




8th Solution: Space Optimized Transaction-Based DP
Steps:
Time Complexity:O(N * K) Same as previous DP approaches.
Space Complexity:O(K) Uses only two 1D arrays.

Use 1D arrays (curr and after) instead of a 2D DP table.
Compute values iteratively from the last day.
Store only the last computed row.

static int maxProfit(int prices[], int k) {
        
        int n=prices.length;
        int Tcount=2*k;
        int [] after = new int [Tcount+1];
        int [] curr = new int [Tcount+1];
        // Filling DP table bottom-up
        for (int ind = n - 1; ind >= 0; ind--) {
            for (int transactionNo = 2 * k - 1; transactionNo >= 0; transactionNo--) {
                int profit = 0;

                if (transactionNo % 2 == 0) { // Buy allowed
                    int buy = -prices[ind] + after[transactionNo + 1]; // Buy
                    int skip = after[transactionNo]; // Skip
                    profit = Math.max(buy, skip);
                } else { // Sell allowed
                    int sell = prices[ind] + after[transactionNo + 1]; // Sell
                    int skip = after[transactionNo]; // Skip
                    profit = Math.max(sell, skip);
                }

                curr[transactionNo] = profit;
            }
            after=curr;
        }

        return curr[0]; // Max profit starting from day 0 with 0 transactions
    }

