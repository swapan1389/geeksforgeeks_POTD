Stock span problem
The stock span problem is a financial problem where we have a series of daily price quotes for a stock and we need to calculate the span of stock price for all days. The span arr[i] of the stocks price on a given day i is defined as the maximum number of consecutive days just before the given day, for which the price of the stock on the given day is less than or equal to its price on the current day.

Examples:

Input: arr[] = [100, 80, 60, 70, 60, 75, 85]
Output: [1, 1, 1, 2, 1, 4, 6]
Explanation: Traversing the given input span 100 is greater than equal to 100 and there are no more elements behind it so the span is 1, 80 is greater than equal to 80 and smaller than 100 so the span is 1, 60 is greater than equal to 60 and smaller than 80 so the span is 1, 70 is greater than equal to 60,70 and smaller than 80 so the span is 2 and so on.  Hence the output will be 1 1 1 2 1 4 6.

Input: arr[] = [10, 4, 5, 90, 120, 80]
Output: [1, 1, 2, 4, 5, 1]
Explanation: Traversing the given input span 10 is greater than equal to 10 and there are no more elements behind it so the span is 1, 4 is greater than equal to 4 and smaller than 10 so the span is 1, 5 is greater than equal to 4,5 and smaller than 10 so the span is 2,  and so on. Hence the output will be 1 1 2 4 5 1.

Constraints:
1 ≤ arr.size()≤ 10^5
1 ≤ arr[i] ≤ 10^5

Expected Complexities
Time Complexity: O(n)Auxiliary Space: O(n)

Brute Force Approach: Time Complexity: O(n²) (Nested loop)  ,Space Complexity: O(1) (Only result storage)
Iterate through the array.
For each element, check previous elements until a greater element is found.
Count the consecutive smaller or equal elements.
Store the count and move to the next element.
Reset the count for the next iteration.


public ArrayList<Integer> calculateSpan(int[] arr) {
        // write code here
        ArrayList<Integer> ans=new ArrayList<>();
        int count=0;
        
        for(int i=0;i<arr.length;i++){
           for(int j=i;j>=0;j--){
               if(arr[j]<=arr[i]){
                   count++;
               }
               else{
                   break;
               }
           }
           ans.add(count);
           count=0;
        }
        
        return ans;
    }


Optimized Approach (Using Stack):Time Complexity: O(n) (Each element is pushed and popped once) ,Space Complexity: O(n) (Stack storage)
Iterate through the array.
Remove elements from the stack if they are smaller or equal to the current element.
Compute the span based on the index difference.
Store the span value.
Push the current index onto the stack.

 public ArrayList<Integer> calculateSpan(int[] arr) {
        // write code here
        ArrayList<Integer> ans=new ArrayList<>();
        Stack<Integer> st=new Stack<>();
        
        for(int i=0;i<arr.length;i++){
            while(!st.isEmpty() && arr[st.peek()]<=arr[i]){
                st.pop();
            }
            
            int count=st.isEmpty()?(i+1):i-st.peek();
            
            ans.add(count);
            st.push(i);
        }
        
        return ans;
    }
