Tree Boundary Traversal
Given a Binary Tree, find its Boundary Traversal. The traversal should be in the following order: 
Left Boundary: This includes all the nodes on the path from the root to the leftmost leaf node. You must prefer the left child over the right child when traversing. Do not include leaf nodes in this section.
Leaf Nodes: All leaf nodes, in left-to-right order, that are not part of the left or right boundary.
Reverse Right Boundary: This includes all the nodes on the path from the rightmost leaf node to the root, traversed in reverse order. You must prefer the right child over the left child when traversing. Do not include the root in this section if it was already included in the left boundary.
Note: If the root doesn't have a left subtree or right subtree, then the root itself is the left or right boundary. 
Examples:
Input: root[] = [1, 2, 3, 4, 5, 6, 7, N, N, 8, 9, N, N, N, N]
Output: [1, 2, 4, 8, 9, 6, 7, 3]
Explanation:
Input: root[] = [1, 2, N, 4, 9, 6, 5, N, 3, N, N, N, N 7, 8]
Output: [1, 2, 4, 6, 5, 7, 8]
Explanation:
As the root doesn't have a right subtree, the right boundary is not included in the traversal.
Input: root[] = [1, N, 2, N, 3, N, 4, N, N] 
    1
     \
      2
       \
        3
         \
          4

Output: [1, 4, 3, 2]
Explanation:
Left boundary: [1] (as there is no left subtree)
Leaf nodes: [4]
Right boundary: [3, 2] (in reverse order)
Final traversal: [1, 4, 3, 2]
Constraints:
1 ≤ number of nodes ≤ 10^5
1 ≤ node->data ≤ 10^5
Expected Complexities
Time Complexity: O(n)Auxiliary Space: O(h)

 ArrayList<Integer> boundaryTraversal(Node node) {
        // code here
         ArrayList<Integer> result = new ArrayList<>();
        if (node == null) return result;

        //  // Step 1: Add root node only if at least one child present
        if(node.left!=null ||  node.right !=null) result.add(node.data);

        // Step 2: Get left boundary (excluding leaf nodes)
        getLeftBoundary(node.left, result);

        // Step 3: Get leaf nodes (from left to right)
        getLeafNodes(node, result);

        // Step 4: Get right boundary (excluding leaf nodes, in reverse order)
        getRightBoundary(node.right, result);

        return result;
    }
    
    // Function to get the left boundary (excluding leaf nodes)
    private void getLeftBoundary(Node node, ArrayList<Integer> result) {
        if (node == null || (node.left == null && node.right == null)) return;

        result.add(node.data); // Add current node
        if (node.left != null) getLeftBoundary(node.left, result);
        else getLeftBoundary(node.right, result); // Move right if left is absent
    }

    // Function to get leaf nodes
    private void getLeafNodes(Node node, ArrayList<Integer> result) {
        if (node == null) return;

        if (node.left == null && node.right == null) {
            result.add(node.data);
            return;
        }

        getLeafNodes(node.left, result);
        getLeafNodes(node.right, result);
    }

    // Function to get the right boundary (excluding leaf nodes, in reverse order)
    private void getRightBoundary(Node node, ArrayList<Integer> result) {
        if (node == null || (node.left == null && node.right == null)) return;

        if (node.right != null) getRightBoundary(node.right, result);
        else getRightBoundary(node.left, result); // Move left if right is absent

        result.add(node.data); // Add after recursion to get reverse order
    }
