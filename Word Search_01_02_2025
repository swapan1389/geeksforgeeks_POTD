Word Search
Difficulty: MediumAccuracy: 32.69%Submissions: 61K+Points: 4
You are given a two-dimensional mat[][] of size n*m containing English alphabets and a string word. Check if the word exists on the mat. The word can be constructed by using letters from adjacent cells, either horizontally or vertically. The same cell cannot be used more than once.

Examples :

Input: mat[][] = [['T', 'E', 'E'], ['S', 'G', 'K'], ['T', 'E', 'L']], word = "GEEK"
Output: true
Explanation:
The letter cells which are used to construct the "GEEK" are colored.
Input: mat[][] = [['T', 'E', 'U'], ['S', 'G', 'K'], ['T', 'E', 'L']], word = "GEEK"
Output: false
Explanation:

It is impossible to construct the string word from the mat using each cell only once.
Input: mat[][] = [['A', 'B', 'A'], ['B', 'A', 'B']], word = "AB"
Output: true
Explanation:

There are multiple ways to construct the word "AB".
Constraints:
1 ≤ n, m ≤ 6
1 ≤ L ≤ 15
mat and word consists of only lowercase and uppercase English letters.
Expected Complexities
Time Complexity: O(n * m * 3^L)Auxiliary Space: O(n * m)

static public boolean isWordExist(char[][] mat, String word) {
        // Code here
        int n=mat.length;
        int m=mat[0].length;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]==word.charAt(0)){
                    if(SearchHelper(i,j,mat,word,n,m,0)) return true;
                }
            }
        }
        
        return false;
    }
    
    
    public static boolean SearchHelper(int i,int j,char[][] mat,String word,int row,int col,int index){
        if(index==word.length()) return true;
        if(i<0 || j<0||i==row||j==col||mat[i][j]!=word.charAt(index)) return false;
        
        char ch=mat[i][j];
        mat[i][j]='#';
        boolean op1=SearchHelper(i+1,j,mat,word,row,col,index+1);  // Vertically Lower
        boolean op2=SearchHelper(i-1,j,mat,word,row,col,index+1);  // Vertically Upper
        boolean op3=SearchHelper(i,j-1,mat,word,row,col,index+1);  // Horizontally Left
        boolean op4=SearchHelper(i,j+1,mat,word,row,col,index+1);  // Horizontally Right
        
        mat[i][j]=ch;
        
        return op1||op2||op3||op4;
        
        
        
        
    }
