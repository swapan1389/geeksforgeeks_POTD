k largest elements
Given an array arr[] of positive integers and an integer k, Your task is to return k largest elements in decreasing order. 
Examples:
Input: arr[] = [12, 5, 787, 1, 23], k = 2
Output: [787, 23]
Explanation: 1st largest element in the array is 787 and second largest is 23.

Input: arr[] = [1, 23, 12, 9, 30, 2, 50], k = 3 
Output: [50, 30, 23]
Explanation: Three Largest elements in the array are 50, 30 and 23.

Input: arr[] = [12, 23], k = 1
Output: [23]
Explanation: 1st Largest element in the array is 23.

Constraints:
1 ≤ k ≤ arr.size() ≤ 10^6
1 ≤ arr[i] ≤ 10^6
 
Expected Complexities
Time Complexity: k+(n-k)*logkAuxiliary Space: k+(n-k)*logk

Apprach 1:
Use a max-heap (PriorityQueue<Integer>) to store all elements in descending order.
Insert all elements of arr[] into the max-heap.
Extract the top k elements from the heap and store them in ans.
Return ans, which already contains elements in decreasing order.

public ArrayList<Integer> kLargest(int[] arr, int k) {
        // Your code here
        ArrayList<Integer> ans=new ArrayList<>();
        
        PriorityQueue<Integer> pq=new PriorityQueue<>(Collections.reverseOrder());
        
        for(int num:arr){
            pq.add(num);
        }
        
        while(k>0 && !pq.isEmpty()){
            ans.add(pq.poll());
            k--;
        }
        
        return ans;
    }

Approach 2:
Use a min-heap to store the k largest elements.
Insert the first k elements into the heap.
For remaining elements, replace the smallest if a larger element is found.
Extract all elements and sort in descending order.

public ArrayList<Integer> kLargest(int[] arr, int k) {
        // Your code here
        ArrayList<Integer> ans=new ArrayList<>();
        
        PriorityQueue<Integer> pq=new PriorityQueue<>();
        
        int i=0;
        while(i<k){
            pq.add(arr[i]);
            i++;
        }
        
        while(i<arr.length){
            if(arr[i]>pq.peek()){
                pq.poll();
                pq.add(arr[i]);
            }
            
            i++;
        }
        
        while(!pq.isEmpty()){
            ans.add(pq.poll());
        }
       
        Collections.sort(ans,Collections.reverseOrder());
        
        return ans;
    }
