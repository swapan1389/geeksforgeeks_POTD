k-th Smallest in BST
Given a BST and an integer k, the task is to find the kth smallest element in the BST. If there is no kth smallest element present then return -1.
Examples:

Input: root = [2, 1, 3], k = 2
Output: 2
Explanation: 2 is the 2nd smallest element in the BST.

Input: root = [2, 1, 3], k = 5
Output: -1
Explanation: There is no 5th smallest element in the BST as the size of BST is 3.

Input: root = [20, 8, 22, 4, 12, N, N, N, N, 10, 14], k = 3
Output: 10
Explanation: 10 is the 3rd smallest element in the BST.
Constraints:
1 <= number of nodes, k <= 10^5
1 <= node->data <= 10^5
Expected Complexities
Time Complexity: O(n)Auxiliary Space: O(1)

Approach 1:
class Solution {
    // Return the Kth smallest element in the given BST
    public int kthSmallest(Node root, int k) {
        // Write your code here
        ArrayList<Integer> list=new ArrayList<>();
        helper(root,list);
        if(k>list.size()) return -1;
        return list.get(k-1);
    }
    
    public void helper(Node root,ArrayList<Integer> list){
        if(root==null) return;
        helper(root.left,list);
        list.add(root.data);
        helper(root.right,list);
    }
}


Approach2:
class Solution {
    // Return the Kth smallest element in the given BST
    int count=0;
    int result=-1;
    public int kthSmallest(Node root, int k) {
        // Write your code here
        helper(root,k);
        return result;
    }
    
    public void helper(Node root,int k){
        if(root==null) return;
        
        helper(root.left,k);
        count++;
        if(count==k){
            result=root.data;
            return;
        }
        
        helper(root.right,k);
    }
}
